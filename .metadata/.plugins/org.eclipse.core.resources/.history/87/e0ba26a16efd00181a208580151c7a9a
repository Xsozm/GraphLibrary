import java.awt.Adjustable;
import java.awt.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;

public class Graph {
	protected String name ; 
	protected String version ;	
	private HashMap<Vertex, LinkedList<Edge>> Adj ;//vertices connected 
	private LinkedList<Vertex>Vertices;
	
	
	public String getLibraryName( ){
		return name;
	}
	
	public String getLibraryVersion( ){
		return version ;
	}
	
	public void addvertex(Vertex v) throws GraphException {
		boolean found =false;
		for(Vertex vv:Adj.keySet()) {
			if(vv._strUniqueID.toString().equals(v._strUniqueID.toString()))
				found=true;
		}
		if(found) {
			throw new GraphException("This Vertex already exists ");
		}
		Adj.put(v, new LinkedList<Edge>());//insert new node with no children 
		

	}
	
	public void insertVertex(StringBuffer strUniqueID,StringBuffer strData , int x ,int y)	throws GraphException{
		Vertex v = new Vertex(strUniqueID,strData,x,y);
		boolean found =false;
		for(Vertex vv:Adj.keySet()) {
			if(vv._strUniqueID.toString().equals(v._strUniqueID.toString()))
				found=true;
		}
		if(found) {
			throw new GraphException("This Vertex already exists ");
		}


		Adj.put(v, new LinkedList<Edge>());//insert new node with no children 


		
	}
	
	public void insertEdge(StringBuffer strVertex1UniqueID,StringBuffer strVertex2UniqueID,StringBuffer strEdgeUniqueID,StringBuffer strEdgeData,int nEdgeCost ) throws GraphException{
		Vertex First=null ;
		Vertex Second=null ;
		for(Vertex v:Adj.keySet()) {

			if(v._strUniqueID.toString().equals(strVertex1UniqueID.toString())) {
				First=v;
			}
			if(v._strUniqueID.toString().equals(strVertex2UniqueID.toString())) {
				Second=v;
			}
			
		}
		if(First ==null || Second==null) {
			throw new GraphException("The Vertex Doesn't Exist");
		}

		Edge E = new Edge(strEdgeUniqueID, strEdgeData, nEdgeCost, First, Second);
		
		Adj.get(First).add(E);
		Adj.get(Second).add(E);
		
		
	}
	
	public void removeVertex(StringBuffer strVertexUniqueID) throws	GraphException{
		Vertex vertex =null;
		for(Vertex v:Adj.keySet()) {
			if(v._strUniqueID.toString().equals(strVertexUniqueID.toString())) {
				vertex = v; 
				Adj.put(v, null);
			}else {
				LinkedList<Edge>L = Adj.get(v);
				for(Edge e :L) {
					if(e.First._strUniqueID.toString().equals(strVertexUniqueID.toString()) || e.Second._strUniqueID.toString().equals(strVertexUniqueID.toString())) {
						L.remove(e);
					}
				}
			}
			if(vertex==null) {
				throw new GraphException("This is Vertex doesn't exist in the graph");
			}
			
		}
		Adj.remove(vertex);

	}
	
	
	
	public void removeEdge(StringBuffer strEdgeUniqueID) throws	GraphException{
		boolean found =false;
		for(Vertex v:Adj.keySet()) {
			LinkedList<Edge>L = Adj.get(v);
			for(Edge e :L) {
				if(e._strUniqueID.toString().equals(strEdgeUniqueID.toString())) {
					found=true;
					L.remove(e);
				}
			}

		}
		if(!found) {
			throw new GraphException("This Edge Doesn't Exist");
		}
		
	}
	
	///////////
	
	public Vector<Edge> incidentEdges(StringBuffer	strVertexUniqueID)	throws GraphException{
		Vector<Edge> Vec = new Vector<Edge>();
		LinkedList<Edge> L =null;
		for(Vertex v:Adj.keySet()) {
			if(v._strUniqueID.toString().equals(strVertexUniqueID.toString())) 
				L= Adj.get(v);
			
		}
		if(L==null) {
			throw new GraphException("This Vertex doesn't exist");
		}
		if(L!=null) {
			for(Edge e :L) {
				Vec.add(e);

			}
		}

		return Vec;
	}
	
	/////////////////////////////
	
	
	
	
	
	public Vector<Vertex> vertices()throws GraphException{
		Vector Vec = new Vector<Vertex>();
		for(Vertex v:Adj.keySet()) {
			Vec.add(v);
		}
		//no need to throw excption it will be an empty vector 
		return Vec;
	}
	//////////////////////
	
	public Vector<Edge> edges() throws GraphException{
		Vector Vec = new Vector<Edge>();
		HashSet<Edge>Set= new HashSet<Edge>();
		for(Vertex v:Adj.keySet()) {
			for(Edge e:Adj.get(v))
				Set.add(e);
		}
		
		for(Edge e:Set)
			Vec.add(e);
		//no exception needed 
		return Vec;
		
	}
	/////////////////////////////
	
	public Vertex[] endVertices(StringBuffer strEdgeUniqueID)
			throws GraphException{
		Vertex Array[]= new Vertex[2];
		for(Vertex v:Adj.keySet()) {
			for(Edge e:Adj.get(v))
				if(e._strUniqueID.toString().equals(strEdgeUniqueID.toString())) {
					Array[0]=e.First;
					Array[1]=e.Second;
					return Array;

				}
		}
		
			throw new GraphException("Edge Doesn't Exist");
	
		
	}
	//////////////////////////
	public Vertex opposite(StringBuffer strVertexUniqueID,StringBuffer strEdgeUniqueID) throws GraphException{
		Vertex vertex = null; 
		for(Vertex v:Adj.keySet()) {
			if(v._strUniqueID.toString().equals(strVertexUniqueID.toString())) {
				vertex= v ;
			for(Edge e:Adj.get(v)) {
				if(e._strUniqueID.toString().equals(strEdgeUniqueID.toString())) {
					if(e.First._strUniqueID.toString().equals(strVertexUniqueID.toString()))
						return e.Second;
					else
						return e.First;
				}
			}
		}
		}
		if(vertex==null) {
			throw new GraphException("This is Vertex doesn't exist in the graph");

		}
		throw new GraphException("This is Edge isn't connected to this vertex");

	}
	
	/////////////////////////
	private void mydfs(HashMap<Vertex, Boolean>Visited , Vertex vertex ,Visitor visitor) {
		Visited.put(vertex, true);
		visitor.visit(vertex);
		
		for(Edge e:Adj.get(vertex)) {
			Vertex v1 = e.First;
			Vertex v2 = e.Second;
			if(!v2._strUniqueID.toString().equals(vertex._strUniqueID.toString()) && !Visited.get(v2)) {
				visitor.visit(e);
				mydfs(Visited,v2,visitor);
			}
			if(!v1._strUniqueID.toString().equals(vertex._strUniqueID.toString()) && !Visited.get(v1)) {
				visitor.visit(e);
				mydfs(Visited,v1,visitor);
			}
		}
		
		
	}
	
	//visitor 
	public void dfs(StringBuffer strStartVertexUniqueID,Visitor visitor) throws GraphException{
		HashMap<Vertex, Boolean>Visited = new HashMap<Vertex,Boolean>();
		Vertex vstart = null ;
		for(Vertex v:Adj.keySet()) {
			if(v._strUniqueID.toString().equals(strStartVertexUniqueID.toString()))
			{
				vstart=v; 
			}
			Visited.put(v, false);
			
		}
		if(vstart==null) {
			throw new GraphException("The Vertex Doesn't Exist");
		}

			
		mydfs(Visited,vstart,visitor);
		
		
	}
	
	//visitor 
	public void bfs(StringBuffer strStartVertexUniqueID,Visitor visitor) throws GraphException{
		HashMap<Vertex, Boolean>Visited = new HashMap<Vertex,Boolean>();
		Vertex vstart = null ;

		for(Vertex v:Adj.keySet()) {
			if(v._strUniqueID.toString().equals(strStartVertexUniqueID.toString()))
			{
				vstart=v; 
			}
			Visited.put(v, false);
			
		}
		if(vstart==null) {
			throw new GraphException("The Vertex Doesn't Exist");
		}
		
		
		 LinkedList<Vertex> queue = new LinkedList<Vertex>(); 
		  
	        // Mark the current node as visited and enqueue it 
	        Visited.put(vstart,true); 
	        queue.add(vstart); 
            visitor.visit(vstart);

	        while (queue.size() != 0) 
	        { 
	            // Dequeue a vertex from queue and print it 
	            Vertex s = queue.poll(); 
	  
	            
	            for (Edge e :Adj.get(s)) 
	            {
	            	Vertex v1 = e.First;
	            	Vertex v2 = e.Second;
	            	if(!v2._strUniqueID.toString().equals(vstart._strUniqueID.toString()) && !Visited.get(v2)) {
	            		visitor.visit(e);
	            		visitor.visit(v2);
	            		Visited.put(v2,true);
	    				queue.add(v2);
	    				//System.out.println(v2._strUniqueID);
	            	}
	    			if(!v1._strUniqueID.toString().equals(vstart._strUniqueID.toString()) && !Visited.get(v1)) {
	    				visitor.visit(e);
	            		visitor.visit(v1);
	    				Visited.put(v1,true);
	    				queue.add(v1);
	    			}
	            } 
	        } 			
	}
	
	   private static void sortByX(ArrayList<Vertex> points) {
	        Collections.sort(points, new Comparator <Vertex> () {
	            public int compare(Vertex point1, Vertex point2) {
	                if (point1._nX < point2._nX)
	                    return -1;
	                if (point1._nX > point2._nX)
	                    return 1;
	                return 0;
	            }
	        });
	    }

	    private static void sortByY(ArrayList<Vertex> points) {
	        Collections.sort(points, new Comparator <Vertex> () {
	            public int compare(Vertex point1, Vertex point2) {
	                if (point1._nY < point2._nY)
	                    return -1;
	                if (point1._nY > point2._nY)
	                    return 1;
	                return 0;
	            }
	        });
	    }
	    
	    private  static double calDistance(Vertex v1, Vertex v2) {
	        double xdist = v2._nX - v1._nX;
	        double ydist = v2._nY - v1._nY;
	        return Math.hypot(xdist, ydist);
	    }
	    
	    private static pair divideAndConquer(ArrayList<Vertex> listofSortedX, ArrayList<Vertex> listofSortedY) {
	        int size = listofSortedX.size();
	        if (size <= 3)
	            return bruteForce(listofSortedX);

	        int index = size >>> 1;
	        ArrayList<Vertex>leftOfCenter = new ArrayList<Vertex>();
	        leftOfCenter.addAll(listofSortedX.subList(0, index));
	        //listofSortedX.subList(0, index));
	        ArrayList<Vertex>rightOfCenter = new ArrayList<Vertex> ();
	        //(listofSortedX.subList(index, size));
	        rightOfCenter.addAll(listofSortedX.subList(index, size));

	        ArrayList<Vertex>tempList= new ArrayList<Vertex>();
	        tempList.addAll(leftOfCenter);
	        
	        sortByY(tempList);

	        pair closestPair = divideAndConquer(leftOfCenter, tempList);

	        tempList.clear();

	        tempList.addAll(rightOfCenter);
	        sortByY(tempList);

	        pair closestPairRight = divideAndConquer(rightOfCenter, tempList);

	        if (closestPairRight.calDistance() < closestPair.calDistance())
	            closestPair = closestPairRight;

	        tempList.clear();

	        double shortestDistance = closestPair.calDistance();
	        double centerX = rightOfCenter.get(0)._nX;
	        for (Vertex v: listofSortedY)
	            if (Math.abs(centerX - v._nX) < shortestDistance)
	                tempList.add(v);

	        for (int i=0; i<tempList.size()-1;i++) {
	            Vertex point1 = tempList.get(i);
	            for (int j=i+1;j<tempList.size();j++) {
	                Vertex point2 = tempList.get(j);
	                if ((point2._nY - point1._nY) >= shortestDistance)
	                    break;
	                double distance = calDistance(point1, point2);
	                if (distance < closestPair.calDistance()) {
	                    closestPair = new pair(point1, point2);
	                    shortestDistance = distance;
	                }
	            }
	        }
	        return closestPair;
	    }
	    
	private static pair bruteForce(ArrayList<Vertex> listofSortedX) {
			if(listofSortedX.size()<2)
				return null;
			if(listofSortedX.size()==2)
				return new pair(listofSortedX.get(0),listofSortedX.get(1));
			pair pair1 = new pair(listofSortedX.get(0),listofSortedX.get(1));
			pair pair2 =new pair(listofSortedX.get(1),listofSortedX.get(2));
			pair pair3 = new pair(listofSortedX.get(0),listofSortedX.get(2));
			
			double d1 = pair1.calDistance();
			double d2 = pair2.calDistance();
			double d3 = pair3.calDistance();
			pair closestpair = pair1;
			double min = pair1.calDistance();
			if(d2<min) {
				closestpair=pair2;
				min=d2;
			}
			if(d3<min) {
				closestpair=pair3;
				min=d3;
			}
			return closestpair;

		
		}

	public Vertex[] closestPair() throws GraphException{
		ArrayList<Vertex> listofSortedX = new ArrayList<Vertex>();
		ArrayList<Vertex> listofSortedY = new ArrayList<Vertex>();
		for(Vertex v :Adj.keySet()) {
			listofSortedX.add(v);
			listofSortedY.add(v);
		}
		sortByX(listofSortedX);
		sortByY(listofSortedY);
        pair ans = divideAndConquer(listofSortedX, listofSortedY);
		Vertex a[]=new Vertex[2];
		a[0]=ans.v1;
		a[1]=ans.v2;
		return a;
	}
	
	public Vector<PathSegment> pathDFS(	StringBuffer strStartVertexUniqueID,StringBuffer strEndVertexUniqueID)throws GraphException{
		Vertex v1 = null; 
		Vertex v2 = null ;
		for(Vertex v:Adj.keySet()) {
			if(v._strUniqueID.toString().equals(strStartVertexUniqueID.toString()))
				v1=v;
			if(v._strUniqueID.toString().equals(strEndVertexUniqueID.toString()))
				v2=v;
		}
		Vector<PathSegment> temp = new Vector<PathSegment>();
		LinkedList<Vector<PathSegment>> ans = new LinkedList<Vector<PathSegment>> ();
		HashMap<Vertex, Boolean>Visited = new HashMap<Vertex,Boolean>();
		for(Vertex v:Adj.keySet()) {
			Visited.put(v, false);
		}
		 modifieddfs(ans,temp,Visited,v1,v2);
		 if(ans.size()==0) {
			 throw new GraphException("There is no path between the two nodes");
		 }
		 return ans.get(0);
		
	}
	
	


	private void modifieddfs(LinkedList<Vector<PathSegment>> ans, Vector<PathSegment> temp,
			HashMap<Vertex, Boolean> visited, Vertex v1, Vertex destination) {
			visited.put(v1, true);
			if(v1._strUniqueID==destination._strUniqueID) {
				PathSegment ps = new PathSegment(destination, null);
				Vector<PathSegment> newvec = new Vector<PathSegment>();
				temp.add(ps);
				newvec.addAll(temp);
				ans.add(newvec);
				return ;
			}
			for(Edge e :Adj.get(v1)) {
				PathSegment ps = new PathSegment(v1,e);
				Vertex v2 =null ;
				if(v1._strUniqueID!=e.First._strUniqueID)
					v2=e.First;
				else
					v2=e.Second;
				if(!visited.get(v2)) {
				temp.add(ps);
				modifieddfs(ans, temp, visited, v2, destination);
				temp.remove(ps);
				visited.put(v1, false);
				}
				
			}
			
		
	}
	
	
	public Vector<PathSegment> minSpanningTree() throws GraphException{
		Vector<Vertex>  e= this.vertices();
		Vector<PathSegment> ans = new Vector<PathSegment>();
		int size =e.size();
		StringBuffer a[] =  new StringBuffer[size];
		for(int i=0;i<e.size();i++) {
			a[i]=e.get(i)._strUniqueID;
		}
		DisjointUnionSets DJ= new DisjointUnionSets(a);
		 
		Vector<Edge>  E= this.edges();
		Collections.sort(E);
		for(Edge edge :E) {
			Vertex first = edge.First;
			Vertex second = edge.Second;
			
			StringBuffer str1 = DJ.find(first._strUniqueID);
			StringBuffer str2 = DJ.find(second._strUniqueID);
			if(!str1.toString().equals(str2.toString())) {
				System.out.println(edge._nEdgeCost);
				ans.add(new PathSegment(first, edge));
				DJ.union(str1, str2);
				
			}
		}

		return ans;
		
	}
	
	
	
	public Vector<Vector<PathSegment>> findShortestPathBF(StringBuffer strStartVertexUniqueID) throws GraphException{
		 int V = this.vertices().size();
		 int  E = this.edges().size(); 
	     HashMap<StringBuffer,Integer> dist = new HashMap<>();
	     HashMap<Vertex,Vertex>Parent = new HashMap<>();
	     
	     Vertex ans = null;
	     for(Vertex v :this.vertices())
	    	  if(v._strUniqueID.toString().equals(strStartVertexUniqueID.toString())) {
	    		  ans=v;
	    	  }
	        for (Vertex v :this.vertices()) 
	            dist.put(v._strUniqueID,Integer.MAX_VALUE); 
	       dist.put(ans._strUniqueID, 0);
	       Parent.put(ans, ans);
	      
	       
	        for (int i=1; i<V; ++i) 
	        { 
	            for (Edge e :this.edges()) 
	            { 
	                StringBuffer u = e.First._strUniqueID;
	                StringBuffer v = e.Second._strUniqueID;
	                int weight = e._nEdgeCost;
	                if (dist.get(u)!=Integer.MAX_VALUE && dist.get(u)+weight<dist.get(v)) {
	                    dist.put(v, dist.get(u)+weight);
	                    Parent.put(e.Second,e.First);
	                }
	                 v = e.First._strUniqueID;
	                 u = e.Second._strUniqueID;
	                 if (dist.get(u)!=Integer.MAX_VALUE && dist.get(u)+weight<dist.get(v)) { 
		                    dist.put(v, dist.get(u)+weight); 
		                    Parent.put(e.First,e.Second);

	                 }

	              
	            } 
	          
	             
	        } 
	  
	
	       for(Vertex v :this.vertices())
	    	   System.out.println(Parent.get(v)._strUniqueID+" "+v._strUniqueID);
	       return null;
	}
	
	
	
	
	
	
	public Vector<Vector<PathSegment>> findAllShortestPathsFW( )throws GraphException {
		HashMap<pair,Integer> dist = new HashMap<>();
		HashMap<pair,pair> next = new HashMap<>();

		Vector<Vertex> v = this.vertices();
		for(Vertex vv:v) {
			for(Vertex vvv:v) {
				if(vv._strUniqueID.toString().equals(vvv._strUniqueID.toString())) {
					dist.put(new pair(vv, vvv), 0);
					next.put(new pair(vv,vvv), new pair(vvv,vvv));
				}else {
				dist.put(new pair(vv,vvv), (int) 10e6);
				next.put(new pair(vv,vvv), new pair(vvv,vvv));
			}
			}
		}
		
		for(Vertex vertex :Adj.keySet()) {
			for(Edge e:Adj.get(vertex)) {
				Vertex vertex1 =vertex; 
				Vertex vertex2 = e.First;
				if(e.First._strUniqueID.toString().equals(vertex1._strUniqueID.toString())) {
					vertex2 = e.Second;
				}
				int cost = e._nEdgeCost;
				for(pair p :dist.keySet()) {

					if(p.v1._strUniqueID.toString().equals(vertex1._strUniqueID.toString()) && p.v2._strUniqueID.toString().equals(vertex2._strUniqueID.toString())) {
						dist.put(p, cost);
					}
					
					if(p.v2._strUniqueID.toString().equals(vertex1._strUniqueID.toString()) && p.v1._strUniqueID.toString().equals(vertex2._strUniqueID.toString())) {
						dist.put(p, cost);
					}
				}
			}
			
		}
		int sz = this.vertices().size();
		 for (Vertex k :v)
	            for (Vertex i :v)
	                for (Vertex j:v) {
	                	int cost1=0;
                		int cost2=0;
                		int cost3=0;
                		pair save =null;
                		pair save2 =null;
	                	for(pair p :dist.keySet()) {
	                		
	                		//i to k 
	    					if(p.v1._strUniqueID.toString().equals(i._strUniqueID.toString()) && p.v2._strUniqueID.toString().equals(k._strUniqueID.toString())) {
	    						cost1=dist.get(p);
	    						save2=p;
	    					}
	    					// k to j
	    					if(p.v1._strUniqueID.toString().equals(k._strUniqueID.toString()) && p.v2._strUniqueID.toString().equals(j._strUniqueID.toString())) {
	    						cost2=dist.get(p);
	    					}
	    					
	    					// i to j
	    					if(p.v1._strUniqueID.toString().equals(i._strUniqueID.toString()) && p.v2._strUniqueID.toString().equals(j._strUniqueID.toString())) {
	    						cost3=dist.get(p);
	    						save=p;
	    					}
	    					
	    					
	    				}
	                    if (cost1 + cost2 < cost3) {
	                        dist.put(save,cost1+cost2);
	                        next.put(save, save2);
	                    }
	                }
		 
		 Vector<Vector<PathSegment>> ans = new Vector<Vector<PathSegment>>(); 
		 reconstruct(dist,next,ans);
		 for(Vector<PathSegment> test :ans) {
			 for(PathSegment ps :test) {
				 System.out.print(ps._vertex._strUniqueID+" ");
			 }
			 System.out.println();
		 }
		
		return ans;
		
	}
	
	
	

	private void reconstruct(HashMap<pair, Integer> dist, HashMap<pair, pair> next, Vector<Vector<PathSegment>> ans) throws GraphException {
		Vector<Vertex> V = this.vertices();
	
		for (Vertex v:V) {
            for (Vertex vv : V) {
                if (!v._strUniqueID.toString().equals(vv._strUniqueID.toString())) {
                  pair p = null ;
                  for(pair x:next.keySet()) {

                	  if(x.v1._strUniqueID.toString().equals(v._strUniqueID.toString()) && x.v2._strUniqueID.toString().equals(vv._strUniqueID.toString()))
                		  p = x;
                  }
                  Stack<Vertex> st = new Stack();
                  
                  
                    do {
                    	//System.out.println(p.v2._strUniqueID);
                    	st.push(p.v2);
                    	p = next.get(p);
                    } while (p!=null && !p.v1._strUniqueID.toString().equals(p.v2._strUniqueID.toString()));
                    st.push(v);
                    Vector<PathSegment> temp = new Vector<PathSegment>();
                    while(st.size()!=0) {
                    	System.out.print(st.pop()._strUniqueID);
//                    	PathSegment ps =new PathSegment( st.peek(), get_edge(st.pop(),st.peek()));
//                    	temp.add(ps);
                    	
                    }
                    System.out.println();
                    ans.addElement(temp);
                    
                }
            }
		}
		
	}

	private Edge get_edge(Vertex pop, Vertex peek) throws GraphException {
		Edge ans=null;
		int cost =10000000;
		for(Edge e :this.edges()) {
			if(e.First._strUniqueID.toString().equals(pop._strUniqueID.toString()) && e.Second._strUniqueID.toString().equals(peek._strUniqueID.toString()))
				if(e._nEdgeCost<cost) {
					cost=e._nEdgeCost;
					ans=e;
				}
			if(e.First._strUniqueID.toString().equals(peek._strUniqueID.toString()) && e.Second._strUniqueID.toString().equals(pop._strUniqueID.toString()))
				if(e._nEdgeCost<cost) {
					cost=e._nEdgeCost;
					ans=e;
				}
		}
		return ans;
	}

	public Graph() {
		Adj=new HashMap<Vertex, LinkedList<Edge>>();
	}
	
	public void show() {
		for(Vertex v:Adj.keySet()) {
			System.out.println(v._strUniqueID);
		}
		

	}

	 
	
	public static void main(String[] args)throws GraphException {
////		Graph g= new Graph();
////		Vertex v1 = new Vertex(new StringBuffer("1"), new StringBuffer("1"));
////		Vertex v2 = new Vertex(new StringBuffer("2"), new StringBuffer("1"));
////		Vertex v3 = new Vertex(new StringBuffer("3"), new StringBuffer("1"));
////		Vertex v4 = new Vertex(new StringBuffer("4"), new StringBuffer("1"));
//////		v1._nX=5;
//////		v2._nX=2;
//////		v3._nX=10;
//////		v4._nX=7;
//////		Vertex[]a = {v1,v2,v3,v4};
//////		Arrays.sort(a);
//////		for(int i=0;i<4;i++)
//////			System.out.println(a[i]._strUniqueID);
////
////		g.show();
//		Graph g = new Graph( );
//		Vertex v1 = new Vertex(new StringBuffer("1") ,new StringBuffer("1" ),1,9);
//		Vertex v2 = new Vertex(new StringBuffer("2") ,new StringBuffer("2" ),0,2);
//		Vertex v3 = new Vertex(new StringBuffer("3") ,new StringBuffer("3" ),3,4);
//		Vertex v4 = new Vertex(new StringBuffer("4") ,new StringBuffer("4" ),5,10);
//		Vertex v5 = new Vertex(new StringBuffer("5") ,new StringBuffer("5" ),5,10);
//		
////		v1.set_Cordinates(1, 9);
////		v2.set_Cordinates(0, 2);
////		v3.set_Cordinates(3, 4);
////		v4.set_Cordinates(5, 10);
////		v5.set_Cordinates(6, 10);
//
//		
//		g.addvertex(v1);
//		g.addvertex(v2);
//		g.addvertex(v3);
//		g.addvertex(v4);
//		g.addvertex(v5);
//
////		g.insertVertex(new StringBuffer("2"), new StringBuffer("2") );
////		g.insertVertex(new StringBuffer("3"), new StringBuffer("3"));
////		g.insertVertex(new StringBuffer("4"), new StringBuffer("4") );
////		g.insertVertex(new StringBuffer("5"), new StringBuffer("5") );
//		g.insertEdge(new StringBuffer("1"),new StringBuffer("4"),new StringBuffer("5"),new StringBuffer("5"),5);
//		//g.insertEdge(new StringBuffer("1"),new StringBuffer("2"),new StringBuffer("2"),new StringBuffer("2"), 2);
//		g.insertEdge(new StringBuffer("2"), new StringBuffer("3"),new StringBuffer("14"),new StringBuffer("14"),14);
//		//g.insertEdge(new StringBuffer("2"), new StringBuffer("4"),new StringBuffer("1"),new StringBuffer("5"),5);
//		//g.insertEdge(new StringBuffer("2"), new StringBuffer("5"),new StringBuffer("4"),new StringBuffer("4"),4);
//		g.insertEdge(new StringBuffer("4"), new StringBuffer("5"), new StringBuffer("58"), new StringBuffer("58"), 58);
//		//g.insertEdge(new StringBuffer("3"), new StringBuffer("5"), new StringBuffer("34"), new StringBuffer("34"), 34);
//		//g.dfs(strStartVertexUniqueID, visitor);
//		//g.bfs(new StringBuffer("3"));
//		//Vector<PathSegment> v = (g.pathDFS(new StringBuffer("1"), new StringBuffer("3")));
////		for(PathSegment ps :v)
////			System.out.println(ps._vertex._strUniqueID);
//		Vertex[] closestPair = g.closestPair();
//		System.out.println(closestPair[0]._strUniqueID+" "+closestPair[1]._strUniqueID);
//		//g.show();

		
	}

}
  class pair{
	 public  Vertex v1 ; 
	 public Vertex v2 ; 
	 
	 
	 public pair(Vertex v1, Vertex v2) {
		 this.v1=v1;
		 this.v2=v2;
	 }
	 
	 protected  double calDistance() {
	        double xdist = v2._nX - v1._nX;
	        double ydist = v2._nY - v1._nY;
	        return Math.hypot(xdist, ydist);
	    }
	 
	
}
  
  
  class subset 
  { 
	  StringBuffer ID ;
      int  rank; 
  }; 
